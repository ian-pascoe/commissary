/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ChatRouteImport } from './routes/_chat'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ChatChatRouteImport } from './routes/_chat/chat'
import { Route as ChatChatIdRouteImport } from './routes/_chat/chat_.$id'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatRoute = ChatRouteImport.update({
  id: '/_chat',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatChatRoute = ChatChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => ChatRoute,
} as any)
const ChatChatIdRoute = ChatChatIdRouteImport.update({
  id: '/chat_/$id',
  path: '/chat/$id',
  getParentRoute: () => ChatRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/chat': typeof ChatChatRoute
  '/chat/$id': typeof ChatChatIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/chat': typeof ChatChatRoute
  '/chat/$id': typeof ChatChatIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_chat': typeof ChatRouteWithChildren
  '/settings': typeof SettingsRoute
  '/_chat/chat': typeof ChatChatRoute
  '/_chat/chat_/$id': typeof ChatChatIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/settings' | '/chat' | '/chat/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/settings' | '/chat' | '/chat/$id'
  id:
    | '__root__'
    | '/'
    | '/_chat'
    | '/settings'
    | '/_chat/chat'
    | '/_chat/chat_/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatRoute: typeof ChatRouteWithChildren
  SettingsRoute: typeof SettingsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_chat': {
      id: '/_chat'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ChatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_chat/chat': {
      id: '/_chat/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatChatRouteImport
      parentRoute: typeof ChatRoute
    }
    '/_chat/chat_/$id': {
      id: '/_chat/chat_/$id'
      path: '/chat/$id'
      fullPath: '/chat/$id'
      preLoaderRoute: typeof ChatChatIdRouteImport
      parentRoute: typeof ChatRoute
    }
  }
}

interface ChatRouteChildren {
  ChatChatRoute: typeof ChatChatRoute
  ChatChatIdRoute: typeof ChatChatIdRoute
}

const ChatRouteChildren: ChatRouteChildren = {
  ChatChatRoute: ChatChatRoute,
  ChatChatIdRoute: ChatChatIdRoute,
}

const ChatRouteWithChildren = ChatRoute._addFileChildren(ChatRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatRoute: ChatRouteWithChildren,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
